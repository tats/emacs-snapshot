#!/usr/bin/make -f
# -*- makefile -*-

# This file is licensed under the terms of the Gnu Public License.
# With the one additional provision that Ian Jackson's name may not be
# removed from the file.

# Copyright 1994,1995 Ian Jackson
# Copyright 2004-2005 Jérôme Marant <jerome@debian.org>
# Copyright 1998-2009 Rob Browning <rlb@defaultvalue.org>

# Originally copied from the GNU Hello Debian rules file (1.3).
# Modified for emacs by Mark Eichin <eichin@kitten.gen.ma.us>.
# Debhelper support added via one of Joey Hess' example files.
# See the debian/changelog for further historical information.

# TODO:
#
#   Figure out what happened to fns-*.elc
#   Should we set defaults for things like xsupport at the top here?
#   Deal with build_binary_pkg and continue integration.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

SHELL := /bin/bash

quilt := QUILT_PATCHES=debian/patches quilt

deb_trash :=

pf := set -o pipefail

# For now we assume that emacs' versioning scheme is always
# MAJOR.MINORtinyrev where MAJOR and MINOR are integers and tinyrev is
# an optional lowercase letter (or letters).  We also assume that
# upstream uses a numbering scheme that sorts in a "Debian friendly"
# way.  So far that's always been true.  If it becomes false, some of
# the values below will have to be set manually.

# At the moment, we try to make it so that a "debian/rules clean" will
# get you back to the same state you were in before "debian/rules
# build".  With the original upstream source that's somewhat tricky
# because they ship the .elc files, but we need to re-build them when
# we patch the corresponding .el files.  This is further complicated
# by the fact that any of these .el files may have macros, and if
# those are changed, then any other .el files that use those macros
# must also be recompiled.  Over the years, we've tried various ways
# to handle this problem, originally by trying to keep track of which
# files need to be recompiled and only recompiling those, then later
# by just re-building all the .elc files with "make bootstrap".  In
# either case, if you don't want to have diff bloat, you have to do
# something to keep track of the original .elc files so you can
# restore them during make clean.

# All of this was a lot of work, and was using quite a bit of
# unnecessary storage both in the .orig.tar.gz and during the package
# build.  So in order to avoid this, and to dramatically simplify
# things, we now just remove the .elc files from the upstream
# distribution whenever we create the debian .orig.tar.gz file for a
# given upstream release.  Since were always clobbering all of the
# .elc files during the package build anyway, this shouldn't be any
# great loss, and it also means that "debian/rules clean" now needs to
# be little more than a "make distclean" followed by a purge of all
# the remaining .elc files.

# NOTE -- emacs doesn't respect .elc files in VPATH build.  They're
# modified in srcdir, not builddir.  We don't worry about this because
# it shouldn't affect our builds ATM, but if we ever have more than
# one emacs configuration which could produce differing .elc files,
# we'll need to be careful.  We'll probably have to build completely
# separate packages from completely separate source trees.

# If the source tree ever ends up in an untenable "can't go forward,
# can't go back" state with respect to patching, you can always start
# over by just moving the current debian directory to a newly unpacked
# orig.tar.gz tree.  Note that f you were in the process of editing a
# patch, you will lose those edits, but shouldn't lose anything else.
# This process just reverts all of the upstream files and abandons the
# volatile "what's been done to the current tree" state that quilt
# maintains in ./.pc.  All of the actual patches are stored in
# debian/patches and should be unharmed.

######################################################################
# Important top-level targets:
#
# check-vars - displays how the version number has been parsed.
# buildpackage - build binary packages via dpkg-buildpackage w/suitable args
# prepare-release - prepare and check debs for upload.
#
######################################################################

# The name of the Debian source package
src_name := $(shell $(pf); dpkg-parsechangelog | egrep '^Source:')
src_name := $(shell $(pf); echo $(src_name) | perl -pe 's/Source:\s+//o')

# The version from the changelog (i.e. 20.5-1)
debian_ver := $(shell $(pf); dpkg-parsechangelog | egrep '^Version:')
debian_ver := $(shell $(pf); echo $(debian_ver) | perl -pe 's/Version:\s+//o')
# The Debian revision (i.e. the 1 from 20.5-1)
# Always everything after the last '-'
debian_rev := $(shell $(pf); echo $(debian_ver) | perl -pe 's/.*-//o')

# The official upstream version defined by emacs-version in lisp/version.el.
# The extraction method matches the code in the upstream configure.in.
nominal_ver := \
  $(shell $(pf); grep 'defconst[	 ]*emacs-version' lisp/version.el \
    | sed -e 's/^[^"]*"\([^"]*\)".*$$/\1/')

# This must be the version that's actually used at runtime for things
# like load-path.  It may not be the same as the upstream version
# (i.e. when you have upstream 20.5a, the functional version may still
# be 20.5), so sometimes we may have to do this by hand.
runtime_ver := $(shell $(pf); echo $(nominal_ver) | perl -pe 's/[a-z]+$$//o')

major_ver := $(shell $(pf); echo $(runtime_ver) | perl -pe 's/\..*$$//o')
minor_ver := $(shell $(pf); echo $(runtime_ver) | perl -pe 's/^[^.]*\.//o')

# version for the debian source, i.e. if the upstream is 21.3, this
# might be 21.3, or it might be 21.3+1 if we've had to have more than
# one re-release of the upstream source.  Rare, but it happens...
# Always everything before the last '-'
debsrc_ver := $(shell $(pf); echo $(debian_ver) | perl -pe 's/-[^-]+$$//o')

# upstream version - the actual upstream version, i.e. 21.4a, minus any +foo
upstream_ver := $(shell $(pf); echo $(debsrc_ver) | perl -pe 's/\+[^+]+$$//o')

deb_orig_tgz := $(src_name)_$(debsrc_ver).orig.tar.gz
# name of the orig_tgz unpack directory
deb_orig_tgz_dir := emacs-$(runtime_ver)

######################################################################
# Customizable variables

# The flavor (i.e. emacs21) currently matches the source package name.
flavor := $(src_name)

bin_priority := 25

# This might also be something like 2006-09-09 for snapshots.
menu_ver := $(major_ver)

info_subdir := emacs-$(major_ver)

######################################################################

# Should these be exported like this (as autotools-dev recommends for
# the two vars below) or not?
export DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
export DEB_HOST_GNU_CPU ?= $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)

# As recommended by /usr/share/doc/autotools-dev/README.Debian.gz.
# Handle cross-compiling and don't make ./configure guess.
export DEB_HOST_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

# FOR AUTOCONF 2.52 AND NEWER ONLY
ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
  confflags += --build $(DEB_HOST_GNU_TYPE)
else
  confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
endif

deb_host_multiarch := $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)

LDFLAGS   := -g -no-pie
CFLAGS    := -DDEBIAN -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O0
else # not noopt
  ifeq (m68k,$(DEB_HOST_ARCH))
    # fix problem with newer versions of gcc on m68k
    # -O2 causes a build failure (broken byte compiler)
    #CFLAGS += -O1
    CFLAGS += -O0
  else # neq (m68k,$(DEB_HOST_ARCH))
    #CFLAGS += -O2 # causes a build failure
    CFLAGS += -O0
  endif # neq (m68k,$(DEB_HOST_ARCH))
endif # not noopt

joblimit := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
ifeq (,$(joblimit))
  joblimit := 1
endif

# Force joblimit to 1 until an upstream race condition is fixed:
#   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=592992
joblimit := 1

target := $(DEB_HOST_GNU_TYPE)
movemail_bin := usr/lib/emacs/$(runtime_ver)/$(target)/movemail

# Info files that are going to show up in the main dir.
main_dir_info_files := \
  efaq \
  mh-e

# Files that the build stage depends on (may also be listed in other vars).
persistent_autogen_build_files := debian/control debian/copyright
nonpersistent_autogen_build_files :=

# These files must always exist, i.e. can't ever be cleaned.
persistent_autogen_install_files :=
nonpersistent_autogen_install_files := \
  debian/$(flavor)-bin-common.postinst \
  debian/$(flavor)-bin-common.prerm \
  debian/$(flavor)-share-common.README.Debian \
  debian/$(flavor)-share-common.docs \
  debian/$(flavor)-share-common.postinst \
  debian/$(flavor)-share-common.prerm \
  debian/$(flavor)-no-x.README.Debian \
  debian/$(flavor)-no-x.menu \
  debian/$(flavor)-no-x.postinst \
  debian/$(flavor)-no-x.prerm \
  debian/$(flavor)-x-gtk.README.Debian \
  debian/$(flavor)-x-gtk.desktop \
  debian/$(flavor)-x-gtk.menu \
  debian/$(flavor)-x-gtk.postinst \
  debian/$(flavor)-x-gtk.prerm \
  debian/$(flavor)-x-lucid.README.Debian \
  debian/$(flavor)-x-lucid.desktop \
  debian/$(flavor)-x-lucid.menu \
  debian/$(flavor)-x-lucid.postinst \
  debian/$(flavor)-x-lucid.prerm

autogen_build_files := \
  $(nonpersistent_autogen_build_files) $(persistent_autogen_build_files)

autogen_install_files := \
  $(nonpersistent_autogen_install_files) $(persistent_autogen_install_files)

persistent_autogen_files := \
  $(persistent_autogen_build_files) $(persistent_autogen_install_files)

nonpersistent_autogen_files := \
  $(nonpersistent_autogen_build_files) $(nonpersistent_autogen_install_files)


# Build directories
pkgdir_common := $(CURDIR)/debian/$(flavor)-share-common
pkgdir_bin_common := $(CURDIR)/debian/$(flavor)-bin-common
pkgdir_x := $(CURDIR)/debian/$(flavor)-x-lucid
pkgdir_nox := $(CURDIR)/debian/$(flavor)-no-x
pkgdir_gtk := $(CURDIR)/debian/$(flavor)-x-gtk
pkgdir_el := $(CURDIR)/debian/$(flavor)-el

install_dir_x := $(CURDIR)/debian/install-x
install_dir_nox := $(CURDIR)/debian/install-nox
install_dir_gtk := $(CURDIR)/debian/install-gtk

local_lpath := /etc/$(flavor):/etc/emacs
local_lpath := $(local_lpath):/usr/local/share/emacs/$(runtime_ver)/site-lisp
local_lpath := $(local_lpath):/usr/local/share/emacs/site-lisp
local_lpath := $(local_lpath):/usr/share/emacs/$(runtime_ver)/site-lisp
local_lpath := $(local_lpath):/usr/share/emacs/site-lisp

# This shouldn't be needed as of 20.3
local_lpath := $(local_lpath):/usr/share/emacs/$(runtime_ver)/leim

# Installation local_lpath
local_lpath_install := $(pkgdir_common)/$(subst :,:$(pkgdir_common)/,$(local_lpath))

define checkroot
  test root = "`whoami`"
endef

define checkdir
  dpkg-parsechangelog > /dev/null
  dh_testdir debian/emacsVER.postinst
  @if ! test -f src/emacs.c; \
  then \
    echo; \
    echo -n "The upstream source does not appear to be available."; \
    echo "  Please put the contents"; \
    echo -n "of $(deb_orig_tgz) into the"; \
    echo " current directory."; \
    echo; \
    false; \
  fi
endef

# If we ever need to do the stripping outside of dh_strip, just add an
# INSTALL_STRIP="-s" to the make vars below.

emacs_inst = (cd debian/$(1) && \
  $(MAKE) install \
    DESTDIR=$(2) \
    infodir=/usr/share/info/emacs-$(major_ver) \
    localstatedir=/var \
    manext=.1$(flavor))

define cleanup_all
  # distclean goes first so we clean using patched code
  rm -f debian/stamp/setup
  rm -f debian/stamp/configure
  rm -f debian/stamp/build
  rm -f configure src/config.in
  dh_autotools-dev_restoreconfig
  -$(MAKE) distclean
  cd info && rm -f $$(ls | grep -v COPYING)
  dh_clean
  #   now clean up bits in the source tree that the above didn't handle
  find -name "*.elc" | xargs --no-run-if-empty rm
  #   now clean up everything else (mostly ./debian related stuff)
  find -name '*~' | xargs --no-run-if-empty rm -f
  rm -f debian/substvars
  rm -f $(nonpersistent_autogen_files)
  rm -rf \
    debian/build-x \
    debian/install-x \
    debian/build-nox \
    debian/install-nox \
    debian/build-gtk \
    debian/install-gtk \
    debian/files*
  rm -rf debian/*.tmp
  rm -rf $(deb_trash)
  test ! -e debian/stamp || rmdir debian/stamp
endef

# If we ever need it, we can create a copy that doesn't assume ./debian/
define deb_sub
  perl -p \
    -e "s|\@PKG_NAME\@|$(pkg_name)|go;" \
    -e "s|\@MAJOR_VERSION\@|$(major_ver)|go;" \
    -e "s|\@MINOR_VERSION\@|$(minor_ver)|go;" \
    -e "s|\@FULL_VERSION\@|$(runtime_ver)|go;" \
    -e "s|\@PACKAGE_VERSION\@|$(debian_ver)|go;" \
    -e "s|\@DEBIAN_REV\@|$(deb_rev)|go;" \
    -e "s|\@NOMINAL_VERSION\@|$(nominal_ver)|go;" \
    -e "s|\@UPSTREAM_VERSION\@|$(upstream_ver)|go;" \
    -e "s|\@DEBSRC_VERSION\@|$(debsrc_ver)|go;" \
    -e "s|\@DEB_FLAVOR\@|$(flavor)|go;" \
    -e "s|\@MENU_VERSION\@|$(menu_ver)|go;" \
    -e "s|\@INFO_FILES\@|$(main_dir_info_files)|go;" \
    -e "s|\@INFO_SUBDIR\@|$(info_subdir)|go;" \
    -e "s|\@X_SUPPORT\@|$(xsupport)|go;" \
    -e "s|\@BIN_PRIORITY\@|$(bin_priority)|go;" \
    -e "s|\@MOVEMAIL_BIN\@|$(movemail_bin)|go;" \
      < $(1) > $(2)
endef

check-vars:
	@echo "upstream_ver: $(upstream_ver)"
	@echo "debian_ver: $(debian_ver)"
	@echo "debsrc_ver: $(debsrc_ver)"
	@echo "debian_rev: $(debian_rev)"
	@echo "nominal_ver: $(nominal_ver)"
	@echo "runtime_ver: $(runtime_ver)"
	@echo "major_ver: $(major_ver)"
	@echo "minor_ver: $(minor_ver)"
.PHONY: check-vars

.PHONY: check-diff
check-diff: clean
	$(checkdir)
	test -r ../$(deb_orig_tgz)
	rm -rf debian/tmp-diff && mkdir debian/tmp-diff
	cd debian/tmp-diff && tar xzpSf ../../../$(deb_orig_tgz)
	cd debian/tmp-diff && mv $(deb_orig_tgz_dir) orig

	mkdir debian/tmp-diff/new
	$(pf); tar cpf - --exclude './debian' --exclude './.pc' . \
	  | (cd debian/tmp-diff/new && tar xpf -)

	@echo
	@echo "########################################"
	@echo "### Diffs outside ./debian"
	@cd debian/tmp-diff && diff -ruN orig new
	@echo "########################################"
	@echo "### Empty file list differences"
	@diff -u \
	  <(cd debian/tmp-diff/orig && find -size 0) \
	  <(cd debian/tmp-diff/new && find -size 0) \
	    > debian/tmp-diff/empty-files.diff || test $$? -eq 1
	@cat debian/tmp-diff/empty-files.diff
	@test ! -s debian/tmp-diff/empty-files.diff || false
	@echo "########################################"
	@rm -rf debian/tmp-diff

deb_trash += debian/tmp-diff


.PHONY: buildpackage
buildpackage:
	$(checkdir)
	dpkg-buildpackage -D -us -uc -rfakeroot -i'\.git|\.pc'

prepare-release:
	$(checkdir)
        # don't want to be root -- using fakeroot below.
        # also, stacking fakeroots seems to cause trouble generating diff.
	@test "`whoami`" != root || \
	  (echo "please run prepare-release as a normal user (not root)"; \
	   false)
        # check for any uncommitted changes
	@if test $$(cd debian && git-diff-files | wc -c) -ne 0; \
	then \
	  read -p "Uncommitted changes.  Continue? [y/n] "; \
          if test "$${REPLY}" != y; \
	  then \
	    false; \
	  fi; \
	fi
        # TODO: make sure we actually installed the binary.
        # TODO: run tests (use a check target?)
	$(MAKE) -f debian/rules clean
	$(MAKE) -f debian/rules buildpackage
	test -f ../$(src_name)_$(debian_ver).diff.gz
	@if [ $$(zgrep '^---' \
	           ../$(src_name)_$(debian_ver).diff.gz  \
	             | grep -v /debian/ | wc -c) -ne 0 ]; \
	then \
	  echo "Diffs outside debian/ found, please fix and retry."; \
	  echo "This probably means either something wasn't cleaned"; \
	  echo "properly, or you need to do some work in debian/patches."; \
	  false; \
	else \
	  echo "Everything looks OK.  Ready for release."; \
	  echo "Don't forget to run debsign if needed."; \
	fi
.PHONY: prepare-release 


debian-sync: $(persistent_autogen_files)

.PHONY: force-debian-sync debian-sync

debian/$(flavor)-x-lucid.%: xsupport := "lucid"
debian/$(flavor)-x-lucid.%: pkg_name := $(flavor)-x-lucid

debian/$(flavor)-no-x.%: xsupport := "nox"
debian/$(flavor)-no-x.%: pkg_name := $(flavor)-no-x

debian/$(flavor)-x-gtk.%: xsupport := "gtk"
debian/$(flavor)-x-gtk.%: pkg_name := $(flavor)-x-gtk

debian/%: debian/%.in debian/changelog
	$(call deb_sub,$<,$@)

debian/$(flavor)-bin-common.%: debian/emacsVER-bin-common.% debian/changelog
	$(call deb_sub,$<,$@)

debian/$(flavor)-share-common.%: debian/emacsVER-share-common.% debian/changelog
	$(call deb_sub,$<,$@)

debian/$(flavor)-el.%: debian/emacsVER-el.% debian/changelog
	$(call deb_sub,$<,$@)

debian/$(flavor)-x-lucid.%: debian/emacsVER.% debian/changelog
	$(call deb_sub,$<,$@)

debian/$(flavor)-no-x.%: debian/emacsVER.% debian/changelog
	$(call deb_sub,$<,$@)

debian/$(flavor)-x-gtk.%: debian/emacsVER.% debian/changelog
	$(call deb_sub,$<,$@)

debian/$(flavor)-share-common.README.Debian: \
  debian/emacsVER-share-common.README debian/patches/*.diff debian/patches/series
	cd debian && \
	  csplit -s -f emacsVER-share-common.README. \
	  emacsVER-share-common.README '/@@PATCH_LIST_HERE@@/'
	cp debian/emacsVER-share-common.README.00 debian/emacsVER-share-common.README.tmp
	for p in $$($(quilt) series); do $(quilt) header $$p; done \
	  >> debian/emacsVER-share-common.README.tmp
	tail -n +2 \
	  < debian/emacsVER-share-common.README.01 \
	  >> debian/emacsVER-share-common.README.tmp
	mv debian/emacsVER-share-common.README.tmp $@

deb_trash += debian/emacsVER-share-common.README.tmp
deb_trash += debian/emacsVER-share-common.README.00
deb_trash += debian/emacsVER-share-common.README.01

debian/stamp/setup:
	$(checkdir)
	dh_autotools-dev_updateconfig
	aclocal
	autoconf
	autoheader
	mkdir -p $(dir $@) && touch $@

# common configure flags
confflags += --prefix=/usr
confflags += --sharedstatedir=/var/lib
confflags += --libexecdir=/usr/lib
confflags += --localstatedir=/var/lib
confflags += --infodir=/usr/share/info
confflags += --mandir=/usr/share/man
confflags += --with-pop=yes
confflags += --enable-locallisppath=$(local_lpath)

# multiarch compatibility
confflags += --with-crt-dir=/usr/lib/$(deb_host_multiarch)

# x configure flags
confflags_x := $(confflags) 
confflags_x += --with-x=yes
confflags_x += --with-x-toolkit=athena
confflags_x += --with-toolkit-scroll-bars

# nox configure flags
confflags_nox := $(confflags) 
confflags_nox += --with-x=no

# gtk configure flags
confflags_gtk := $(confflags) 
confflags_gtk += --with-x=yes
confflags_gtk += --with-x-toolkit=gtk
confflags_gtk += --with-toolkit-scroll-bars

configure: debian/stamp/configure
.PHONY: configure

define cfg_tree
  rm -rf $(1)
  mkdir $(1)
  cd $(1) && CFLAGS="$(CFLAGS)" ../../configure $(confflags) $(2)
endef

define build_cmd
  $(MAKE) -j $(joblimit) CFLAGS="$(CFLAGS)" LDFLAGS="$(LDFLAGS)"
endef

# For those who prefer the old-style non-toolkit scrollbars, just add
# --without-toolkit-scroll-bars to the build-x cfg_tree line below.
# The resulting emacsXY-x-lucid package will have the old scrollbars.

debian/stamp/configure: debian/stamp/setup
	$(checkdir)
	$(call cfg_tree,debian/build-x,$(confflags_x))
	$(call cfg_tree,debian/build-nox,$(confflags_nox))
	$(call cfg_tree,debian/build-gtk,$(confflags_gtk))
	mkdir -p debian/stamp && touch $@

build: debian/stamp/build
.PHONY: build

debian/stamp/build: debian/stamp/configure $(autogen_build_files)
	$(checkdir)
        # first build has to be a bootstrap build
	cd debian/build-x && $(build_cmd) bootstrap
	cd debian/build-x && $(build_cmd) clean
	cd debian/build-x && $(build_cmd)
	cd debian/build-nox && $(build_cmd)
	cd debian/build-gtk && $(build_cmd)
	mkdir -p debian/stamp && touch $@


define install_common_binpkg_bits
  # args: (1) srcdir (2) pkgdir (3) pkgname (4) bin-suffix

  install -d $(2)/usr/bin/
  test -f $(1)/usr/bin/emacs-*
  cp -a $(1)/usr/bin/emacs-* $(2)/usr/bin/$(flavor)-$(4)
  dh_link -p$(3) usr/bin/$(flavor)-$(4) usr/bin/$(flavor)

  install -d $(2)/usr/share/emacs/$(runtime_ver)/etc
  cp -a $(1)/usr/share/emacs/$(runtime_ver)/etc/DOC-$(runtime_ver).1 \
	$(2)/usr/share/emacs/$(runtime_ver)/etc/

  install -d $(2)/usr/share/man/man1
  dh_link -p$(3) \
    usr/share/man/man1/emacs.1$(flavor).gz \
    usr/share/man/man1/$(flavor).1.gz
  dh_link -p$(3) \
    usr/share/man/man1/emacs.1$(flavor).gz \
    usr/share/man/man1/$(flavor)-$(4).1.gz

endef


install: debian/stamp/build $(autogen_install_files)
	$(checkdir)
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	rm -rf $(install_dir_x) $(install_dir_nox) $(install_dir_gtk)

#	$(call emacs_inst,build-x,$(install_dir_x))
#	$(call emacs_inst,build-nox,$(install_dir_nox))
#	$(call emacs_inst,build-gtk,$(install_dir_gtk))

        # Use X install dir for the common packages too.
	$(call emacs_inst,build-x,$(install_dir_x))

        ##################################################
        # emacsXY-share-common

	cp -a $(install_dir_x)/* $(pkgdir_common)

	rm -r $(pkgdir_common)/usr/bin
	rm -r $(pkgdir_common)/usr/lib

	cd $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/etc \
	  && test -f DOC-$(runtime_ver).*
	cd $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/etc \
	  && rm DOC-$(runtime_ver).*

        # lisp path directories
	install -d $(pkgdir_common)/etc/$(flavor)/site-start.d
	install -d $(pkgdir_common)/usr/share/$(flavor)

        # The version-specific site-lisp dir, say emacs/21.1/site-lisp, needs
        # to be in share/FLAVOR so that as we upgrade from 21.1 to 21.2,
        # etc., add-on package bits don't get left behind.
	mv $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/site-lisp \
		$(pkgdir_common)/usr/share/$(flavor)
	dh_link -p$(flavor)-share-common usr/share/$(flavor)/site-lisp \
			usr/share/emacs/$(runtime_ver)/site-lisp

        # This is a duplicate of the file in FLAVOR/site-lisp
	rm $(pkgdir_common)/usr/share/emacs/site-lisp/subdirs.el

	cd $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/etc/images/icons \
	  && convert emacs_16.png emacs_16.xpm

	cd $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/etc/images/icons \
	  && convert emacs_32.png emacs_32.xpm

        # Mangle info files.
	chmod 755 debian/mangle-info
	for f in $(main_dir_info_files); \
	do \
	  DEBIAN_INFO_PREFIX=$(info_subdir) \
	    debian/mangle-info \
	      $(pkgdir_common)/usr/share/info/$(info_subdir)/$$f; \
	done

	perl -pi -e "s|man1/etags\\.1|man1/etags\\.1$(flavor)|" \
	  $(pkgdir_common)/usr/share/man/man1/ctags.1$(flavor)

        # At least etc/COPYING is needed by M-x describe-copying.
	rm $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/etc/COPYING
	rm $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/lisp/COPYING
	dh_link -p$(flavor)-share-common /usr/share/common-licenses/GPL-3 \
	  usr/share/emacs/$(runtime_ver)/etc/COPYING
	dh_link -p$(flavor)-share-common /usr/share/common-licenses/GPL-3 \
	  usr/share/emacs/$(runtime_ver)/lisp/COPYING

        # Install replacements for non-free files that can be reached
        # through C-h
	for f in THE-GNU-PROJECT; \
	do \
	  sed \
	    -e "s/@FILE@/$$f/g" \
	    -e "s/@MAJOR_VERSION@/$(major_ver)/g" \
	    $(CURDIR)/debian/missing-file.dfsg > \
	    $(pkgdir_common)/usr/share/emacs/$(runtime_ver)/etc/$$f.dfsg ; \
	done

	$(pf); cd $(pkgdir_common) && \
	  find -name "*.elc" | perl -pe 's/\.elc$$/\.el/o' | xargs rm -f

	$(pf); cd $(pkgdir_common) && \
	  find -name "*.elc" | perl -pe 's/\.elc$$/\.el\.gz/o' | xargs rm -f

        # Remove extraneous info dir files.  These may not exist if dpkg
        # is 1.5.4 or newer.
	rm -f $(pkgdir_common)/usr/share/info/emacs-$(major_ver)/dir
	rm -f $(pkgdir_common)/usr/share/info/emacs-$(major_ver)/dir.old

        # Remove the shared game score directory to as a simple way to avoid
        # a conflict with other flavors of Emacs.  Since Debian's
        # update-game-score binary isn't setuid, that directory is never used.
	rm $(pkgdir_common)/var/games/emacs/tetris-scores
	rm $(pkgdir_common)/var/games/emacs/snake-scores
	rmdir $(pkgdir_common)/var/games/emacs/
	rmdir $(pkgdir_common)/var/games/
	rmdir $(pkgdir_common)/var/

        # Make sure /usr/local dir doesn't exist.
	rm -r $(pkgdir_common)/usr/local

        ##################################################
        # emacsXY-bin-common

        # Move common binaries to emacs-bin-common.
	install -d $(pkgdir_bin_common)/usr
	cp -a $(install_dir_x)/usr/bin $(pkgdir_bin_common)/usr
	cp -a $(install_dir_x)/usr/lib $(pkgdir_bin_common)/usr

        # Make sure there's just one.
	test -f $(pkgdir_bin_common)/usr/bin/emacs-*
	rm $(pkgdir_bin_common)/usr/bin/{emacs,emacs-*}

        # Set up movemail.
	chown root.mail $(pkgdir_bin_common)/$(movemail_bin)
	chmod g+s $(pkgdir_bin_common)/$(movemail_bin)

        # Set up alternatives.
	alternatives=`ls $(pkgdir_bin_common)/usr/bin | xargs` && \
	  set -x && \
	  for f in debian/$(flavor)-bin-common.*; \
	  do \
	    perl -pwi -e "s|\@ALTERNATIVES\@|$${alternatives}|go" $$f ; \
	  done

	for f in `ls $(pkgdir_bin_common)/usr/bin`; \
	do \
	  mv $(pkgdir_bin_common)/usr/bin/$$f \
	     $(pkgdir_bin_common)/usr/bin/$$f.$(flavor) ; \
	done

        ##################################################
        # emacsXY-x-lucid
	$(call install_common_binpkg_bits,\
	  $(install_dir_x),$(pkgdir_x),$(flavor)-x-lucid,lucid)

        # install desktop entry
	install -d $(pkgdir_x)/usr/share/applications
	install -m 0644 \
	  debian/$(flavor)-x-lucid.desktop $(pkgdir_x)/usr/share/applications/

        ##################################################
        # emacsXY-no-x
	$(call emacs_inst,build-nox,$(install_dir_nox))
	$(call install_common_binpkg_bits,\
	  $(install_dir_nox),$(pkgdir_nox),$(flavor)-no-x,nox)
	rm -rf $(install_dir_nox)

        ##################################################
        # emacsXY-x-gtk
	$(call emacs_inst,build-gtk,$(install_dir_gtk))
	$(call install_common_binpkg_bits,\
	  $(install_dir_gtk),$(pkgdir_gtk),$(flavor)-x-gtk,gtk)
        # install desktop entry
	install -d $(pkgdir_gtk)/usr/share/applications
	install -m 0644 \
	  debian/$(flavor)-x-gtk.desktop $(pkgdir_gtk)/usr/share/applications/
	rm -rf $(install_dir_gtk)

        ##################################################
        # emacsXY-el
	install -d $(pkgdir_el)
	$(pf); \
	(cd $(install_dir_x) && find -name "*.el" -o -name "*.el.gz" -print0 \
	 | tar cpf - --null --files-from -) \
	   | (cd $(pkgdir_el) && tar xpf -)

        ##################################################
        # final cleanup
	rm -rf $(install_dir_x)
	rm -rf $(install_dir_nox)
	rm -rf $(install_dir_gtk)


binary-indep: build install
	$(checkdir)
	dh_testdir -i
	dh_testroot -i
	dh_installchangelogs -i
	dh_installdocs -i
	dh_link -i
	dh_strip -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_shlibdeps -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

binary-arch: build install
	$(checkdir)
	dh_testdir -a
	dh_testroot -a
	dh_installinfo -a
	dh_installman -a
	dh_installchangelogs -a
	dh_installdocs -a
	dh_installexamples -a
#	dh_install -a
	dh_installmenu -a
	dh_link -a
	dh_strip -a
	dh_compress -a
	dh_fixperms -a -X$(movemail_bin)
	dh_installdeb -a
	dh_shlibdeps -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

binary: binary-indep binary-arch

clean: debian-sync
	$(checkdir)
	$(cleanup_all)

source diff:
	@echo >&2 'source and diff are obsolete - use dpkg-source -b'; false

.PHONY: binary binary-arch binary-indep clean
