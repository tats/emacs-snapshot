From 1b2fd498ac9e30565498bf1e9a5ccd2a6fb06dad Mon Sep 17 00:00:00 2001
From: Robert Pluim <rpluim@gmail.com>
Date: Mon, 22 Feb 2021 15:48:06 +0100
Subject: Skip tests that require Internet when there's no Internet

Bug#46641

The network-stream-tests actually work fine when the local machine has
no IP at all, but cause a crash in the GnuTLS library when there is an
IP configured but the interface is down.

* test/lisp/net/network-stream-tests.el (internet-is-working): New
defvar, checks if we can resolve "google.com".
(connect-to-tls-ipv4-nowait, connect-to-tls-ipv6-nowait)
(open-network-stream-tls-nowait, open-gnutls-stream-new-api-nowait)
(open-gnutls-stream-old-api-nowait): Use it to check for working
Internet access.

* test/src/process-tests.el (internet-is-working): New defvar, checks
if we can resolve "google.com".
(lookup-family-specification, lookup-unicode-domains)
(unibyte-domain-name, lookup-google, non-existent-lookup-failure): Use
it to check for working Internet access.

XXX DEBIAN: This patch was adjusted to always consider that we don't
have internet available during tests.

Origin: backport, https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=a728135a2b551917588425d9758c6cc932cb591b
Reviewed-By: Sergio Durigan Junior <sergiodj@debian.org>
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=982969
Bug: https://debbugs.gnu.org/cgi/bugreport.cgi?bug=46641
---
 test/lisp/net/network-stream-tests.el | 20 ++++++++++++++++++++
 test/src/process-tests.el             | 26 +++++++++++++++++++-------
 2 files changed, 39 insertions(+), 7 deletions(-)

diff --git a/test/lisp/net/network-stream-tests.el b/test/lisp/net/network-stream-tests.el
index a0df0a26672..699c2da97cf 100644
--- a/test/lisp/net/network-stream-tests.el
+++ b/test/lisp/net/network-stream-tests.el
@@ -30,6 +30,21 @@
 ;; it pulls in nsm, which then makes the :nowait t' tests fail unless
 ;; we disable the nsm, which we do by binding 'network-security-level'
 
+;; Check if the Internet seems to be working.  Mainly to pacify
+;; Debian's CI system.
+;;
+;; XXX DEBIAN COMMENT: We explicitly set this variable to nil because
+;; we know that there is no internet connection during build time.
+;; Also, our version of 'dns-query' does not properly return 'nil'
+;; when the interface is configured but there is no DNS configured.
+;; Although this has been fixed upstream (see commit 00f7744c1b0f), I
+;; chose not to backport the patch because it's a non-trivial change
+;; of behaviour.
+(defvar internet-is-working nil)
+;; (progn
+;;   (require 'dns)
+;;   (dns-query "google.com")))
+
 (ert-deftest make-local-unix-server ()
   (skip-unless (featurep 'make-network-process '(:family local)))
   (let* ((file (make-temp-name "/tmp/server-test"))
@@ -280,6 +295,7 @@ make-tls-server
 (ert-deftest connect-to-tls-ipv4-nowait ()
   (skip-unless (executable-find "gnutls-serv"))
   (skip-unless (gnutls-available-p))
+  (skip-unless internet-is-working)
   (let ((server (make-tls-server 44331))
         (times 0)
         (network-security-level 'low)
@@ -322,6 +338,7 @@ make-tls-server
 (ert-deftest connect-to-tls-ipv6-nowait ()
   (skip-unless (executable-find "gnutls-serv"))
   (skip-unless (gnutls-available-p))
+  (skip-unless internet-is-working)
   (skip-unless (not (eq system-type 'windows-nt)))
   (skip-unless (featurep 'make-network-process '(:family ipv6)))
   (let ((server (make-tls-server 44333))
@@ -406,6 +423,7 @@ make-tls-server
 (ert-deftest open-network-stream-tls-nowait ()
   (skip-unless (executable-find "gnutls-serv"))
   (skip-unless (gnutls-available-p))
+  (skip-unless internet-is-working)
   (let ((server (make-tls-server 44335))
         (times 0)
         (network-security-level 'low)
@@ -634,6 +652,7 @@ make-tls-server
 (ert-deftest open-gnutls-stream-new-api-nowait ()
   (skip-unless (executable-find "gnutls-serv"))
   (skip-unless (gnutls-available-p))
+  (skip-unless internet-is-working)
   (let ((server (make-tls-server 44668))
         (times 0)
         (network-security-level 'low)
@@ -672,6 +691,7 @@ make-tls-server
 (ert-deftest open-gnutls-stream-old-api-nowait ()
   (skip-unless (executable-find "gnutls-serv"))
   (skip-unless (gnutls-available-p))
+  (skip-unless internet-is-working)
   (let ((server (make-tls-server 44669))
         (times 0)
         (network-security-level 'low)
diff --git a/test/src/process-tests.el b/test/src/process-tests.el
index 66a76fd33b8..f54bcf05047 100644
--- a/test/src/process-tests.el
+++ b/test/src/process-tests.el
@@ -329,12 +329,24 @@ process-tests--file-handler
                                                   invocation-directory))
                  :stop t)))
 
-;; All the following tests require working DNS, which appears not to
-;; be the case for hydra.nixos.org, so disable them there for now.
+;; Check if the Internet seems to be working.  Mainly to pacify
+;; Debian's CI system.
+;;
+;; XXX DEBIAN COMMENT: We explicitly set this variable to nil because
+;; we know that there is no internet connection during build time.
+;; Also, our version of 'dns-query' does not properly return 'nil'
+;; when the interface is configured but there is no DNS configured.
+;; Although this has been fixed upstream (see commit 00f7744c1b0f), I
+;; chose not to backport the patch because it's a non-trivial change
+;; of behaviour.
+(defvar internet-is-working nil)
+;; (progn
+;;   (require 'dns)
+;;   (dns-query "google.com")))
 
 (ert-deftest lookup-family-specification ()
   "network-lookup-address-info should only accept valid family symbols."
-  (skip-unless (not (getenv "EMACS_HYDRA_CI")))
+  (skip-unless internet-is-working)
   (should-error (network-lookup-address-info "google.com" 'both))
   (should (network-lookup-address-info "google.com" 'ipv4))
   (when (featurep 'make-network-process '(:family ipv6))
@@ -342,18 +354,18 @@ process-tests--file-handler
 
 (ert-deftest lookup-unicode-domains ()
   "Unicode domains should fail"
-  (skip-unless (not (getenv "EMACS_HYDRA_CI")))
+  (skip-unless internet-is-working)
   (should-error (network-lookup-address-info "faß.de"))
   (should (network-lookup-address-info (puny-encode-domain "faß.de"))))
 
 (ert-deftest unibyte-domain-name ()
   "Unibyte domain names should work"
-  (skip-unless (not (getenv "EMACS_HYDRA_CI")))
+  (skip-unless internet-is-working)
   (should (network-lookup-address-info (string-to-unibyte "google.com"))))
 
 (ert-deftest lookup-google ()
   "Check that we can look up google IP addresses"
-  (skip-unless (not (getenv "EMACS_HYDRA_CI")))
+  (skip-unless internet-is-working)
   (let ((addresses-both (network-lookup-address-info "google.com"))
         (addresses-v4 (network-lookup-address-info "google.com" 'ipv4)))
     (should addresses-both)
@@ -362,7 +374,7 @@ process-tests--file-handler
     (should (network-lookup-address-info "google.com" 'ipv6))))
 
 (ert-deftest non-existent-lookup-failure ()
-  (skip-unless (not (getenv "EMACS_HYDRA_CI")))
+  (skip-unless internet-is-working)
   "Check that looking up non-existent domain returns nil"
   (should (eq nil (network-lookup-address-info "emacs.invalid"))))
 
